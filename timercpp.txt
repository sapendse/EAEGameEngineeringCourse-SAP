#include "Timer.h"

namespace DragonForge
{
		float LastFrame_ms;

		LARGE_INTEGER PerformanceFrequency;

		bool Timer::Initialize()
		{
			if( !QueryPerformanceFrequency( & PerformanceFrequency ) )
				return false;

			CalcFrameTime();
			CalcFrameTime(); // Warm the delta timer;

			return true;
		}

		float Timer::GetLastFrame_ms()
		{
			//if(LastFrame_ms > 16 || LastFrame_ms==0)
			//return static_cast<unsigned int>( 1000.0f / 60.0f );
			//else
			return LastFrame_ms;
		}

		void Timer::CalcFrameTime()
		{
			assert( PerformanceFrequency.QuadPart > 0 );

			static LARGE_INTEGER PreviousFrameCounter;

			LARGE_INTEGER CurrentFrameCounter;

			BOOL success = QueryPerformanceCounter( &CurrentFrameCounter );
			assert( success == TRUE );

			LONGLONG i = PerformanceFrequency.QuadPart;

			double FrameTime = ((CurrentFrameCounter.QuadPart - PreviousFrameCounter.QuadPart) * 1000) / (double)i;
			assert( FrameTime < UINT_MAX );

			LastFrame_ms = static_cast<float>(FrameTime);

			PreviousFrameCounter = CurrentFrameCounter;
		}

		unsigned int Timer::GetCurrentCounter_ms()
		{
			LARGE_INTEGER CurrentFrameCounter;

			BOOL success = QueryPerformanceCounter( &CurrentFrameCounter );
			assert( success == TRUE );

			return CurrentFrameCounter.LowPart;
		}

} 